name: Build and Deploy Frontend

run-name: ${{ github.repository }} is building and deploying

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

env:
  IMAGE_NAME: ${{ secrets.ALIYUN_ACR_REGISTRY }}/taklip-container/yoda-web
  IMAGE_TAG_LATEST: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ALIYUN_ACR_REGISTRY }}
          username: ${{ secrets.ALIYUN_ACR_USERNAME }}
          password: ${{ secrets.ALIYUN_ACR_PASSWORD }}

      - name: Build and push Docker image to ACR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}
          build-args: |
            NEXT_PUBLIC_API_URL=http://www.taklip.com/api/v1
            NEXT_PUBLIC_APP_URL=http://www.taklip.com
          no-cache: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
      # - name: Check out repository code
      #   uses: actions/checkout@v4

      - name: Deploy to AliCloud ECS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.ALIYUN_ECS_HOST }}
          username: ${{ secrets.ALIYUN_ECS_USER }}
          key: ${{ secrets.ALIYUN_ECS_SSH_KEY }}
          # timeout: 30m
          # command_timeout: 30m
          # script_stop: true
          script: |
            echo ""
            echo "🔐 Step 1: Logging into ACR..."
            sudo docker login -u ${{ secrets.ALIYUN_ACR_USERNAME }} -p ${{ secrets.ALIYUN_ACR_PASSWORD }} ${{ secrets.ALIYUN_ACR_REGISTRY }}

            echo ""
            echo "📥 Step 2: Pulling latest image..."
            sudo docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}

            echo ""
            echo "🏷️ Step 3: Tagging image for compose..."
            docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }} yoda-web:latest

            echo ""
            echo "📍 Step 4: Navigating to deployment directory..."
            cd /opt/project-yoda/yoda-web

            echo ""
            echo "🛑 Step 5: Stopping existing containers..."
            docker compose down --remove-orphans || true

            echo ""
            echo "🧹 Step 6: Cleaning up..."
            docker container prune -f || true
            docker rm -f yoda-web || true

            echo ""
            echo "🚀 Step 10: Starting frontend service..."
            echo "Command: docker compose up -d yoda-web"
            docker compose up -d

            echo ""
            echo "⏳ Step 11: Initial wait (5 seconds)..."
            sleep 10

            echo ""
            echo "🏥 Step 12: Health check loop (10 attempts, 5s interval)..."
            for i in {1..10}; do
              # Check from inside the container since ports aren't exposed to host
              # Health endpoint returns JSON with "status":"ok"
              if docker exec yoda-web wget -q -O- http://localhost:3000/api/health 2>/dev/null | grep -q '"status":"ok"'; then
                echo "✅✅✅ DEPLOYMENT SUCCESSFUL! ✅✅✅"
                echo "📊 Container status:"
                docker ps | grep yoda-web
                echo ""
                echo "📋 Health check response:"
                docker exec yoda-web wget -q -O- http://localhost:3000/api/health 2>/dev/null
                echo ""
                echo "🎉 Application is healthy and responding!"
                exit 0
              else
                echo "⏳ Health endpoint not responding (attempt $i/10)"
                if [ $i -eq 1 ] || [ $i -eq 5 ]; then
                  echo "📋 Container logs (last 10 lines):"
                  docker logs yoda-web --tail 10 2>&1
                  echo "🔍 Testing health endpoint:"
                  docker exec yoda-web wget -q -O- http://localhost:3000/api/health 2>&1 | head -3 || echo "No response"
                fi
                sleep 5
              fi
            done

            echo "❌ Deployment failed - application did not start properly"
            echo "📋 Container logs:"
            docker logs yoda-web --tail 50
            exit 1
