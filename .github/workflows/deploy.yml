name: Build and Deploy Frontend

run-name: ${{ github.repository }} is building and deploying

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

env:
  IMAGE_NAME: ${{ secrets.ALIYUN_ACR_REGISTRY }}/taklip-container/yoda-web
  IMAGE_TAG_LATEST: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://www.taklip.com/api/v1
          NEXT_PUBLIC_APP_URL: http://www.taklip.com

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ALIYUN_ACR_REGISTRY }}
          username: ${{ secrets.ALIYUN_ACR_USERNAME }}
          password: ${{ secrets.ALIYUN_ACR_PASSWORD }}

      - name: Build and push Docker image to ACR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Deploy to AliCloud ECS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.ALIYUN_ECS_HOST }}
          username: ${{ secrets.ALIYUN_ECS_USER }}
          key: ${{ secrets.ALIYUN_ECS_SSH_KEY }}
          script: |
            echo "üîê Logging into ACR..."
            echo "${{ secrets.ALIYUN_ACR_PASSWORD }}" | docker login ${{ secrets.ALIYUN_ACR_REGISTRY }} -u ${{ secrets.ALIYUN_ACR_USERNAME }} --password-stdin

            echo "üì• Pulling latest image..."
            docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}

            echo "üè∑Ô∏è Tagging image for compose..."
            docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }} yoda-web:latest

            echo "üöÄ Stopping existing containers..."
            cd /opt/project-yoda/yoda-web
            docker compose down yoda-web --remove-orphans || true

            echo "üßπ Cleaning up old containers..."
            docker container prune -f || true
            
            echo "üóëÔ∏è Force removing any existing yoda-web container..."
            docker rm -f yoda-web || true

            echo "üöÄ Starting frontend service..."
            docker compose up -d yoda-web

            echo "‚è≥ Waiting for application to start..."
            sleep 30

            echo "üè• Checking application health..."
            for i in {1..10}; do
              if curl -f http://localhost:3000/api/health; then
                echo "‚úÖ Deployment successful!"
                exit 0
              else
                echo "‚è≥ Attempt $i/10: Application not ready yet..."
                sleep 10
              fi
            done

            echo "‚ùå Deployment failed - application did not start properly"
            echo "üìã Container logs:"
            docker logs yoda-web --tail 50
            exit 1
