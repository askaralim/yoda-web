name: Build and Deploy Frontend

run-name: ${{ github.repository }} is building and deploying

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

env:
  IMAGE_NAME: ${{ secrets.ALIYUN_ACR_REGISTRY }}/taklip-container/yoda-web
  IMAGE_TAG_LATEST: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://www.taklip.com/api/v1
          NEXT_PUBLIC_APP_URL: http://www.taklip.com

      - name: Set up QEMU (for multi-platform builds)
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ALIYUN_ACR_REGISTRY }}
          username: ${{ secrets.ALIYUN_ACR_USERNAME }}
          password: ${{ secrets.ALIYUN_ACR_PASSWORD }}

      - name: Build and push multi-platform Docker image to ACR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Deploy to AliCloud ECS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.ALIYUN_ECS_HOST }}
          username: ${{ secrets.ALIYUN_ECS_USER }}
          key: ${{ secrets.ALIYUN_ECS_SSH_KEY }}
          timeout: 30m
          command_timeout: 30m
          script_stop: true
          script: |
            #!/bin/bash
            # Keep SSH connection alive
            export TERM=xterm
            # Function to handle errors
            error_handler() {
              local line_no=$1
              echo ""
              echo "════════════════════════════════════════════════════════════"
              echo "❌ ERROR at line $line_no"
              echo "════════════════════════════════════════════════════════════"
              echo "Last command failed. Check output above for details."
              exit 1
            }
            
            trap 'error_handler ${LINENO}' ERR
            set -e  # Exit on error
            set -o pipefail  # Catch errors in pipes
            
            echo "════════════════════════════════════════════════════════════"
            echo "🚀 Deployment Started: $(date '+%Y-%m-%d %H:%M:%S')"
            echo "════════════════════════════════════════════════════════════"
            echo ""
            echo "🔐 Step 1: Logging into ACR..."
            if echo "${{ secrets.ALIYUN_ACR_PASSWORD }}" | docker login ${{ secrets.ALIYUN_ACR_REGISTRY }} -u ${{ secrets.ALIYUN_ACR_USERNAME }} --password-stdin 2>&1 | grep -q "Login Succeeded"; then
              echo "✅ ACR login successful"
            else
              echo "❌ ACR login failed"
              echo "Error: Unable to authenticate with ACR"
              exit 1
            fi

            echo ""
            echo "📥 Step 2: Pulling latest image..."
            echo "Image: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}"
            if docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}; then
              echo "✅ Image pulled successfully"
              echo "Image details:"
              docker images | grep yoda-web | head -5
            else
              echo "❌ Failed to pull image from ACR"
              echo "Checking available images:"
              docker images | head -10
              exit 1
            fi

            echo ""
            echo "🏷️ Step 3: Tagging image for compose..."
            if docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }} yoda-web:latest; then
              echo "✅ Image tagged as yoda-web:latest"
              docker images | grep yoda-web
            else
              echo "❌ Failed to tag image"
              exit 1
            fi

            echo ""
            echo "📍 Step 4: Navigating to deployment directory..."
            if cd /opt/project-yoda/yoda-web; then
              echo "✅ Current directory: $(pwd)"
              echo "📋 Files in directory:"
              ls -la | head -20
            else
              echo "❌ Directory /opt/project-yoda/yoda-web does not exist!"
              echo "Available directories:"
              ls -la /opt/project-yoda/ || echo "/opt/project-yoda does not exist"
              exit 1
            fi

            echo ""
            echo "🛑 Step 5: Stopping existing containers..."
            docker compose down yoda-web --remove-orphans || true
            echo "📊 Checking for remaining yoda-web containers:"
            docker ps -a | grep yoda-web || echo "✅ No yoda-web containers found"

            echo ""
            echo "🧹 Step 6: Cleaning up..."
            docker container prune -f || true
            docker rm -f yoda-web 2>/dev/null || echo "No yoda-web container to remove"

            echo ""
            echo "🔍 Step 7: Verifying docker-compose.yml..."
            if [ -f docker-compose.yml ]; then
              echo "✅ docker-compose.yml exists"
              echo "File size: $(ls -lh docker-compose.yml | awk '{print $5}')"
              echo ""
              echo "📋 Checking yoda-web service configuration:"
              if docker compose config 2>&1 | grep -A 15 yoda-web; then
                echo "✅ yoda-web service found in compose file"
              else
                echo "❌ yoda-web service NOT found in docker-compose.yml!"
                echo ""
                echo "Full docker-compose.yml content:"
                cat docker-compose.yml
                exit 1
              fi
            else
              echo "❌ docker-compose.yml not found in $(pwd)"
              echo "Available files:"
              ls -la
              exit 1
            fi

            echo ""
            echo "🌐 Step 8: Verifying Docker network..."
            if docker network ls | grep taklip-shared-network; then
              echo "✅ Network taklip-shared-network exists"
              docker network inspect taklip-shared-network --format '{{.Name}}: {{len .Containers}} containers'
            else
              echo "⚠️  Network taklip-shared-network not found"
              echo "Available networks:"
              docker network ls
              echo "Attempting to create network..."
              docker network create taklip-shared-network || echo "Failed to create network"
            fi

            echo ""
            echo "📁 Step 9: Verifying volume paths..."
            if [ -d "$HOME/yoda/uploads" ]; then
              echo "✅ Uploads directory exists: $HOME/yoda/uploads"
              echo "Directory size: $(du -sh $HOME/yoda/uploads 2>/dev/null || echo 'unknown')"
              echo "File count: $(find $HOME/yoda/uploads -type f 2>/dev/null | wc -l || echo '0')"
            else
              echo "⚠️  Uploads directory not found: $HOME/yoda/uploads"
              echo "Creating directory..."
              mkdir -p $HOME/yoda/uploads || echo "Failed to create uploads directory"
            fi

            echo ""
            echo "🚀 Step 10: Starting frontend service..."
            echo "Command: docker compose up -d yoda-web"
            if docker compose up -d yoda-web 2>&1; then
              echo "✅ Docker compose command executed"
            else
              echo "❌ Docker compose command failed"
              echo "Checking compose logs:"
              docker compose logs yoda-web 2>&1 || echo "No logs"
              exit 1
            fi

            echo ""
            echo "⏳ Step 11: Initial wait (5 seconds)..."
            sleep 5
            
            echo ""
            echo "📊 Container status after start:"
            if docker ps | grep yoda-web; then
              echo "✅ Container is running"
            else
              echo "❌ Container is NOT running"
              echo "All containers:"
              docker ps -a | grep yoda-web
            fi
            
            echo ""
            echo "📋 Container inspection:"
            CONTAINER_STATUS=$(docker inspect yoda-web --format '{{.State.Status}}' 2>/dev/null || echo "not_found")
            CONTAINER_HEALTH=$(docker inspect yoda-web --format '{{.State.Health.Status}}' 2>/dev/null || echo "no_healthcheck")
            echo "Status: $CONTAINER_STATUS"
            echo "Health: $CONTAINER_HEALTH"
            
            echo ""
            echo "📝 Initial container logs (last 30 lines):"
            docker logs yoda-web --tail 30 2>&1 || echo "❌ No logs available"

            echo ""
            echo "🏥 Step 12: Health check loop (10 attempts, 5s interval)..."
            for i in {1..10}; do
              echo ""
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "🔍 Health Check Attempt $i/10 at $(date +%H:%M:%S)"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              
              # Check if container exists and is running
              if docker ps --format '{{.Names}}' | grep -q "^yoda-web$"; then
                echo "✅ Container 'yoda-web' is running"
                
                # Get container details
                UPTIME=$(docker ps --filter name=yoda-web --format '{{.Status}}')
                echo "Uptime: $UPTIME"
                
                # Check health status
                HEALTH=$(docker inspect yoda-web --format '{{.State.Health.Status}}' 2>/dev/null || echo "no_healthcheck")
                echo "Health status: $HEALTH"
                
                # Try to curl health endpoint
                echo "Testing health endpoint..."
                if curl -f -s http://localhost:3000/api/health; then
                  echo ""
                  echo "✅✅✅ DEPLOYMENT SUCCESSFUL! ✅✅✅"
                  echo ""
                  echo "📊 Final deployment status:"
                  docker ps | grep yoda-web
                  echo ""
                  echo "🎉 Application is healthy and responding!"
                  exit 0
                else
                  echo "⏳ Health endpoint not responding (attempt $i/10)"
                  echo "Curl response:"
                  curl -v http://localhost:3000/api/health 2>&1 | grep -E "HTTP|Connection|curl:" || echo "No response"
                  
                  echo ""
                  echo "Latest logs (last 10 lines):"
                  docker logs yoda-web --tail 10 2>&1
                fi
              else
                echo "❌ Container 'yoda-web' is NOT running!"
                echo ""
                echo "Checking all yoda-web containers:"
                docker ps -a | grep yoda-web || echo "No yoda-web containers found at all"
                
                echo ""
                echo "Container logs (if exists):"
                docker logs yoda-web --tail 20 2>&1 || echo "Container not found"
              fi
              
              if [ $i -lt 10 ]; then
                echo "⏳ Waiting 5 seconds before next attempt..."
                sleep 5
              fi
            done

            echo ""
            echo "════════════════════════════════════════════════════════════"
            echo "❌❌❌ DEPLOYMENT FAILED ❌❌❌"
            echo "Application did not start properly after 10 attempts"
            echo "════════════════════════════════════════════════════════════"
            
            echo ""
            echo "📊 QUICK DIAGNOSTICS:"
            echo "────────────────────────────────────────────────────────────"
            
            # Container status
            if docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep yoda-web; then
              echo "✅ Container found"
              
              # Get container logs if exists
              echo ""
              echo "📋 Container Logs (last 50 lines):"
              docker logs yoda-web --tail 50 2>&1 || echo "No logs"
              
              # Check if it's running
              if docker ps --format '{{.Names}}' | grep -q "^yoda-web$"; then
                echo "✅ Container is running"
              else
                echo "❌ Container stopped. Exit code:"
                docker inspect yoda-web --format '{{.State.ExitCode}}' 2>/dev/null || echo "unknown"
              fi
            else
              echo "❌ No yoda-web container found"
              echo ""
              echo "Checking docker-compose.yml:"
              if [ -f docker-compose.yml ]; then
                cat docker-compose.yml | grep -A 10 "yoda-web:" || echo "No yoda-web service in compose file"
              else
                echo "❌ docker-compose.yml not found in $(pwd)"
              fi
            fi
            
            echo ""
            echo "════════════════════════════════════════════════════════════"
            
            exit 1
